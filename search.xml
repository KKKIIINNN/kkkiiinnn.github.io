<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ASUS-FL8000UQ黑苹果</title>
    <url>/archives/3851022e.html</url>
    <content><![CDATA[<p><img src="/images/ASUS-FL8000UQ/post.jpg" alt="post"></p>
<a id="more"></a>

<h1 id="EFI地址：-ASUS-FL8000UQ-Hackintosh"><a href="#EFI地址：-ASUS-FL8000UQ-Hackintosh" class="headerlink" title="EFI地址： ASUS-FL8000UQ-Hackintosh"></a><center>EFI地址： <a href="https://github.com/KKKIIINNN/ASUS-FL8000UQ-Hackintosh" target="_blank" rel="noopener">ASUS-FL8000UQ-Hackintosh</a></center></h1><h1 id="ASUS-FL8000UQ-Hackintosh-For-MacOS-Mojave-Catalina"><a href="#ASUS-FL8000UQ-Hackintosh-For-MacOS-Mojave-Catalina" class="headerlink" title="ASUS-FL8000UQ-Hackintosh For MacOS Mojave/Catalina"></a><center>ASUS-FL8000UQ-Hackintosh For MacOS Mojave/Catalina</center></h1><h2 id="一、配置："><a href="#一、配置：" class="headerlink" title="一、配置："></a>一、配置：</h2><table>
<thead>
<tr>
<th>配置</th>
<th>型号</th>
</tr>
</thead>
<tbody><tr>
<td>处理器</td>
<td>i7-8550U</td>
</tr>
<tr>
<td>核显</td>
<td>UHD620</td>
</tr>
<tr>
<td>独显</td>
<td>GeForce 940MX（已屏蔽）</td>
</tr>
<tr>
<td>内存</td>
<td>4G/4G 海力士DDR4 2400MHz</td>
</tr>
<tr>
<td>硬盘</td>
<td>120G SSD/1T HDD</td>
</tr>
<tr>
<td>声卡</td>
<td>ALC294</td>
</tr>
<tr>
<td>无线网卡</td>
<td>DW1820A-08PKF4</td>
</tr>
</tbody></table>
<p>关于拆机卡BCM943602CS蓝牙4.2版和BCM943602CDP蓝牙4.2版导致在关机状态下拔插电源适配器电脑自动开机的情况，需要屏蔽拆机卡的第13针脚，也就是无线网络唤醒功能的针脚，屏蔽后即可解决此问题。至于这两张卡的蓝牙4.1版本我没有测试，不知道会不会出现此类问题，要入手需谨慎。强烈推荐DW1820A-08PKF4版本，无需屏蔽针脚，稳定运行。</p>
<p><img src="/images/ASUS-FL8000UQ/4.png" alt="4"></p>
<h2 id="二、正常工作"><a href="#二、正常工作" class="headerlink" title="二、正常工作"></a>二、正常工作</h2><ol>
<li>CPU变频</li>
<li>核显硬件加速，独显无法驱动已做屏蔽</li>
<li>声卡输出（自编译AppleALC驱动）</li>
<li>HDMI输出</li>
<li>USB</li>
<li>WIFI/蓝牙(已更换DW1820A,原装AR9565可驱动,有需要可去远景论坛查找）</li>
<li>电量显示正常</li>
<li>触控板</li>
<li>睡眠和唤醒</li>
</ol>
<h2 id="三、一键开启HIDPI项目地址：-one-key-hidpi"><a href="#三、一键开启HIDPI项目地址：-one-key-hidpi" class="headerlink" title="三、一键开启HIDPI项目地址： one-key-hidpi"></a>三、一键开启HIDPI项目地址： <a href="https://github.com/xzhih/one-key-hidpi" target="_blank" rel="noopener">one-key-hidpi</a></h2><h2 id="四、关于F5-F12的问题。"><a href="#四、关于F5-F12的问题。" class="headerlink" title="四、关于F5~F12的问题。"></a>四、关于F5~F12的问题。</h2><p>已添加SSDT加载苹果F5~F12按键功能，不再使用Fn组合键。  </p>
<table>
<thead>
<tr>
<th>按键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>F5</td>
<td>Brightness_down</td>
</tr>
<tr>
<td>F6</td>
<td>Brightness_up</td>
</tr>
<tr>
<td>F7</td>
<td>Scan Previous Track</td>
</tr>
<tr>
<td>F8</td>
<td>Play/Pause</td>
</tr>
<tr>
<td>F9</td>
<td>Scan Next Track</td>
</tr>
<tr>
<td>F10</td>
<td>Mute</td>
</tr>
<tr>
<td>F11</td>
<td>Volume_down</td>
</tr>
<tr>
<td>F12</td>
<td>Volume_up</td>
</tr>
</tbody></table>
<p>如果需要用到这些按键原本的功能的话，可以删除ACPI文件下的SSDT-Fkey.aml,然后使用Karabiner Elements来进行键位调整，这样就能在使用原本功能的同时也支持Mac的功能。</p>
<h2 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h2><p>1.BIOS309无法安装的问题已经修复，不需要再在win10里面禁用“更新不包括驱动程序”了。<br>2.安装完成后请使用Hackintool重新定制USB以解决睡眠问题：<a href="https://blog.daliansky.net/Intel-FB-Patcher-USB-Custom-Video.html" target="_blank" rel="noopener">USB定制教程</a><br>3.OpenCore关闭”Msic-&gt;ShowPicker”后可在开机过程中在ASUS标志出来后用alt键来显示启动菜单，笔记本自带键盘需要长按alt键，外接键盘需要不断点按alt键。<br>4.Windows+Mac双系统推荐使用NDK-OpenCore，对windows没有影响。原版OpenCore可能导致windows激活信息丢失。</p>
<h2 id="六、HDMI注意事项"><a href="#六、HDMI注意事项" class="headerlink" title="六、HDMI注意事项"></a>六、HDMI注意事项</h2><p>此电脑在BIOS中打开CSM兼容选项就可以在外接显示器中显示BIOS和Clover界面以及开机过程，但如果用外接显示器开机，那么黑苹果内屏将无法使用，但是10.14 Mojave中在clover里加上“igfxcflbklt=1”启动参数，开机后将笔记本盖子合上再打开即可同时使用内外屏，但注意，加上此启动参数后亮度调节将失效。此方法在10.15 Catalina中无效，所以建议10.15 Catalina不要打开CSM兼容模式，用内屏来开机，等黑苹果完全启动即可使用外屏。</p>
<h2 id="七、关于睡眠过程中电脑自动唤醒解决方案"><a href="#七、关于睡眠过程中电脑自动唤醒解决方案" class="headerlink" title="七、关于睡眠过程中电脑自动唤醒解决方案"></a>七、关于睡眠过程中电脑自动唤醒解决方案</h2><p>当电脑出现自动唤醒后，打开终端输入 log show –last 1d | grep “Wake reason” 找到唤醒电脑的设备，然后在DSDT中搜索对应的设备，将设备下面的_PRW方法注释掉即可。</p>
<h2 id="八、本机NVRAM在Mac下可以正常使用，不需要再模拟NVRAM。如果使用OpenCore引导，就可以可在偏好设置中使用“启动磁盘”来设置默认启动项。"><a href="#八、本机NVRAM在Mac下可以正常使用，不需要再模拟NVRAM。如果使用OpenCore引导，就可以可在偏好设置中使用“启动磁盘”来设置默认启动项。" class="headerlink" title="八、本机NVRAM在Mac下可以正常使用，不需要再模拟NVRAM。如果使用OpenCore引导，就可以可在偏好设置中使用“启动磁盘”来设置默认启动项。"></a>八、本机NVRAM在Mac下可以正常使用，不需要再模拟NVRAM。如果使用OpenCore引导，就可以可在偏好设置中使用“启动磁盘”来设置默认启动项。</h2><p>如何测试是否支持NVRAM:<br>1.终端输入  sudo nvram 1212=1  后重启；<br>2.重启后打开终端输入  nvram -p | grep 1212  ，如果输出1212   1，即NVRAM工作正常，否则不正常；<br>3.测试完后终端输入  sudo nvram -d 1212  来删除自定义变量。</p>
<h2 id="九、截图"><a href="#九、截图" class="headerlink" title="九、截图"></a>九、截图</h2><p><img src="/images/ASUS-FL8000UQ/1.png" alt="1"></p>
<p><img src="/images/ASUS-FL8000UQ/2.png" alt="2"></p>
<p><img src="/images/ASUS-FL8000UQ/3.png" alt="3"></p>
]]></content>
  </entry>
  <entry>
    <title>分别利用Github和Coding来搭建博客</title>
    <url>/archives/9447ec3f.html</url>
    <content><![CDATA[<p><img src="/images/Coding/post.png" alt="post"></p>
<a id="more"></a>

<h1 id="一、注册Github-amp-Coding"><a href="#一、注册Github-amp-Coding" class="headerlink" title="一、注册Github&amp;Coding"></a>一、注册Github&amp;Coding</h1><p>这是<a href="https://github.com/" target="_blank" rel="noopener">Github</a>和<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>的官网，点击进去分别注册一个账号。</p>
<h1 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h1><p> 1、去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>官网下载对应系统的安装包并安装。<br> 2、安装<code>hexo</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<h1 id="三、建立本地博客"><a href="#三、建立本地博客" class="headerlink" title="三、建立本地博客"></a>三、建立本地博客</h1><p> 1、创建博客。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>2、生成本地页面并试运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>然后打开浏览器，输入地址<code>localhost:4000</code> 即可看到效果。</p>
<h2 id="附：主页配置blog-config-yml"><a href="#附：主页配置blog-config-yml" class="headerlink" title="附：主页配置blog/_config.yml"></a>附：主页配置<code>blog/_config.yml</code></h2><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">title</td>
<td align="center">网站标题</td>
</tr>
<tr>
<td align="center">subtitle</td>
<td align="center">网站副标题</td>
</tr>
<tr>
<td align="center">description</td>
<td align="center">网站描述</td>
</tr>
<tr>
<td align="center">keywords</td>
<td align="center">网站的关键词。使用半角逗号 , 分隔多个关键词。</td>
</tr>
<tr>
<td align="center">author</td>
<td align="center">您的名字</td>
</tr>
<tr>
<td align="center">language</td>
<td align="center">网站使用的语言</td>
</tr>
<tr>
<td align="center">timezone</td>
<td align="center">网站时区。<code>Hexo</code> 默认使用您电脑的时区。请参考 时区列表 进行设置，如 <code>America/New_York, Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td>
</tr>
</tbody></table>
<p>更多具体参数请参考<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">官方文档</a></p>
<h1 id="四、给Github和Coding添加SSH公钥"><a href="#四、给Github和Coding添加SSH公钥" class="headerlink" title="四、给Github和Coding添加SSH公钥"></a>四、给Github和Coding添加SSH公钥</h1><h2 id="1、生成SSH公钥"><a href="#1、生成SSH公钥" class="headerlink" title="1、生成SSH公钥"></a>1、生成SSH公钥</h2><p>你可以按如下命令来生成 sshkey:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;</span><br><span class="line"># Generating public&#x2F;private rsa key pair...</span><br></pre></td></tr></table></figure>

<p>按照提示完成三次回车，即可生成 ssh key。用记事本打开C:\Users\xxx\.ssh\id_rsa.pub即可看到生成的公钥。</p>
<h2 id="2、给Github添加SSH公钥"><a href="#2、给Github添加SSH公钥" class="headerlink" title="2、给Github添加SSH公钥"></a>2、给Github添加SSH公钥</h2><p>打开<a href="https://github.com/" target="_blank" rel="noopener">Github</a>，点击右上角你的头像然后选择<code>Settings</code>，在左侧栏中找到并点击<code>SSH and GPG keys</code>，然后点击右边的<code>New SSH key</code>，将你第一步生成的<code>SSH key</code>复制进来即可。然后命令行输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>来测试是否连接成功，如果出现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi XXX!You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>即成功连接<code>Github</code>。</p>
<h2 id="3、给Coding添加SSH公钥"><a href="#3、给Coding添加SSH公钥" class="headerlink" title="3、给Coding添加SSH公钥"></a>3、给Coding添加SSH公钥</h2><p>打开<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>，然后点击右上角你的头像然后选择<code>个人设置</code>，在左侧栏中找到并点击<code>SSH公钥</code>，，然后点击右边的<code>新增公钥</code>，将你第一步生成的<code>SSH key</code>复制进来即可。然后命令行输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@e.coding.net</span><br></pre></td></tr></table></figure>

<p>来测试是否连接成功，如果出现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Coding 提示: Hello XX, You&#39;ve connected to Coding.net via SSH. This is a personal key.</span><br><span class="line">XX，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥.</span><br><span class="line">公钥指纹：xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx</span><br></pre></td></tr></table></figure>

<p>即成功连接<code>Coding</code>。</p>
<h1 id="五、将博客部署到Github-amp-Coding上"><a href="#五、将博客部署到Github-amp-Coding上" class="headerlink" title="五、将博客部署到Github&amp;Coding上"></a>五、将博客部署到Github&amp;Coding上</h1><p>1、在<code>Github</code>上建立一个仓库，名称为<code>用户名.github.io</code>，在<code>Coding</code>上新建一个代码托管项目，名称填<code>用户名.coding.me</code>。<br>2、安装<code>hexo-deployer-git</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>3、配置<code>blog/_config.yml</code></p>
<p>①、单独部署到<code>Github</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:用户名&#x2F;用户名.github.io.git  &#x2F;&#x2F;复制代码仓库里的SSH地址即可</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>②、单独部署到<code>Coding</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@e.coding.net:用户名&#x2F;用户名.coding.me.git  &#x2F;&#x2F;复制代码仓库里的SSH地址即可</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>③、<code>Github&amp;Coding</code>双线部署</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@github.com:用户名&#x2F;用户名.github.io.git  &#x2F;&#x2F;复制代码仓库里的SSH地址即可</span><br><span class="line">  branch: master</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@e.coding.net:用户名&#x2F;用户名.coding.me.git  &#x2F;&#x2F;复制代码仓库里的SSH地址即可</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>4、部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h1 id="六、访问博客"><a href="#六、访问博客" class="headerlink" title="六、访问博客"></a>六、访问博客</h1><h2 id="1、Github"><a href="#1、Github" class="headerlink" title="1、Github"></a>1、Github</h2><p>进入<code>Github</code>仓库，库点击 <code>Settings</code> 按钮进入仓库设置页面，滑到下面找到 <code>GitHub Pages</code> 项就会看到<code>用户名.github.io</code>，这就是你的<code>Github</code>博客网址，至此，你就可以通过<code>用户名.github.io</code>来进行访问你的博客了。</p>
<h2 id="2、Coding"><a href="#2、Coding" class="headerlink" title="2、Coding"></a>2、Coding</h2><p><code>Coding</code> 的 <code>Pages</code>服务目前需要实名认证才可以用，实名完后需要在 <code>项目设置</code> -&gt; <code>功能开关</code> 里面打开 <code>持续集成</code> 和 <code>持续部署</code> 两项功能：</p>
<p><img src="/images/Coding/1.png" alt="1"></p>
<p><img src="/images/Coding/2.png" alt="2"></p>
<p>然后在项目的 <code>持续部署</code> 里面就可以设置静态网站(也就是<code>Pages</code> 服务)了。</p>
<p><img src="/images/Coding/3.png" alt="3"></p>
<p>点击 <code>立即发布静态网站</code>，然后填写下面的相关信息点击保存</p>
<p><img src="/images/Coding/4.png" alt="4"></p>
<p><img src="/images/Coding/5.png" alt="5"></p>
<p>此时，<code>Coding</code>就会给我们已经设置好的访问地址，然后点击一下<code>立即部署</code> 按钮即可通过<code>Coding</code>给我们的地址来访问你的博客了。</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/archives/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
